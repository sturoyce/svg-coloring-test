{"version":3,"sources":["components/elements/SvgElem.js","components/elements/GroupElem.js","components/elements/PathElem.js","components/SVGHolder.js","components/UI/Colors.js","components/UI/ColorSwatch.js","components/UI/ColorSwatchGroup.js","components/UI/ColorPicker.js","components/App.js","index.js"],"names":["SvgElem","props","className","x","y","width","height","viewBox","children","GroupElem","id","transform","PathElem","onClick","e","setFill","pathId","fill","fills","d","pathCoordinates","SVGHolder","parsedElementsArray","pathID","useState","selectedFile","setSelectedFile","selectedFileExtension","setSelectedFileExtension","setTestJPG","key","uuidv4","data","svgData","setSvgData","basefill","fillColors","setFillColors","updateInitialFillColorArray","fillColor","prevData","setFillColor","elementID","tempColorArray","colorPickerValue","getGElementsAndAttributes","groupElement","pathElement","groupElementObject","getAttribute","hasChildren","gChildren","i","length","tagName","groupChildren","push","newPath","pathChildren","parseTemporarySvg","temporarySvgText","svgElement","DOMParser","parseFromString","getElementsByTagName","svgDimensions","svgWidth","hasAttribute","replace","svgHeight","viewBoxString","substring","substr","indexOf","getSvgDimensions","svgChildGroupElements","buildSvgPaths","svgElementData","htmlFor","isFileConfirmed","type","accept","onChange","fileExtension","target","files","name","split","pop","ext","checkFileExtension","console","log","setIsFileSelected","isFileSelected","setSelectedNewFile","reader","FileReader","onload","staticSvgData","result","setIsFileConfirmed","readAsText","onloadend","invertJPG","readAsDataURL","selectedNewFile","map","buildSvgGroups","gIdAtr","gTransformAtr","defaultColorsArray","ColorSwatch","click","style","backgroundColor","color","value","ColorSwatchGroup","colors","index","updateColor","ColorPicker","previewColor","setPreviewColor","lastpreviewColor","setlastpreviewColor","updatePreviewColor","updateColorHandler","revertPreviewColor","colorArray","mouseOverFunction","mouseOutFunction","App","colorPickerColor","setColorPickerColor","newColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a231dd7.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SvgElem(props) {\n\n  return (\n\n  <svg className=\"svg-elem\" x=\"0px\" y=\"0px\" width={+props.width + \"px\"} height={+props.height + \"px\"} viewBox={\"0 0 \" + +props.width + \" \" + +props.height}>\n    {props.children}\n  </svg>\n  \n  );\n}\nexport default SvgElem;\n","import React from \"react\";\n\nfunction GroupElem(props) {\n\n  return (\n    <g id={props.id} transform={props.transform}>\n      {props.children}\n    </g>\n  );\n}\nexport default GroupElem;\n","import React from \"react\";\n\nfunction PathElem(props) {\n\n  function updateFill(e) {\n    props.setFill(props.pathId)\n  }\n\n  return <path onClick={updateFill} fill={props.fills[props.pathId]} d={props.pathCoordinates}></path>;\n}\nexport default PathElem;\n","import React, { useState, Fragment } from \"react\";\n//import Jimp from 'jimp'; //Importing this so people who don't have SVGs prepped can use rasters \nimport { v4 as uuidv4 } from \"uuid\";\nimport SvgElem from \"./elements/SvgElem\";\nimport GroupElem from \"./elements/GroupElem\";\nimport PathElem from \"./elements/PathElem\";\nimport \"./elements/Elements.css\";\n\n/** TODO\n * \n * Check on file size, and inform of limit (Do not downsize - will be responsible for image loss. So add criteria.)\n * Add in JPG to SVG converter.\n * Put in error checking if input box is closed and no file has been picked.\n * Check file-type for selection. inform if not correct filetype i.e. SVG/JPG etc\n * Add a loading animation during parsing.\n * \n * \n */\n/**\n * HELLO! I take my work seriously, but not my comments, as they are the one place I can express myself whilst being informative.\n * I am my comments, it's how I am, it's who I am. Life is too short for formality. Although, I probably tip the scales too far in the other direction, sorry.\n * This Component takes an SVG file, and converts it to a modifyable... modifiable? (I'll google that later) component tree.\n * This means you can upload your (or someone elses) SVG and click on the white areas to colour it right away.\n * There may be better ways of doing this, but so far this is my way, and I try my best.\n * @returns NAFFINK... uh wait let me check.\n */\nfunction SVGHolder(props) {\n\n  /**\n   * Some naughty global variables, will fix later probably, maybe, well... We'll see.\n   */\n  let parsedElementsArray = [];\n  let pathID = 0;\n  \n  /**\n   * File related Constants / Hooks\n   */\n  const [selectedFile, setSelectedFile] = useState();\n  const [selectedFileExtension, setSelectedFileExtension] = useState();\n  const [testJPG, setTestJPG] = useState(\"https://image.smythstoys.com/original/desktop/193849.jpg\");\n\n  const [svgData, setSvgData] = useState( {\n    key:uuidv4(),\n    width: 0,\n    height: 0,\n    data: []\n  })\n\n  /**\n   * Fill functionality related vars / hooks\n   */\n  const basefill=\"#FFFFFF\";\n  //const outlineFill=\"#000000\";\n  const [fillColors, setFillColors] = useState([]);\n\n\n  /**\n   * This function is used to set up the initial array of fill colors dynamically\n   * @param {*} fillColor \n   */\n  function updateInitialFillColorArray(fillColor) {\n    setFillColors((prevData) => {\n      return [...prevData, fillColor];\n    });\n  }\n\n\n  /**\n   * This is our colouring function. It just updates the fill colour in the fill array\n   * @param {*} e \n   */\n  function setFillColor(elementID) {\n\n      const tempColorArray = [...fillColors];\n      tempColorArray[elementID] = props.colorPickerValue;\n      setFillColors(tempColorArray);\n  }\n\n\n  /**\n   * This is our colouring function. It just updates the fill colour in the fill array\n   * \n   */\n   function resetColors() {\n     setFillColors([])\n    }\n\n  //MOVE ALL THIS TO A HELPER JS AND IMPORT later once functioning! Don't forget.\n\n  /**\n   * Function to retrieve the coordinates of... something. Our SVG paths I guess? Yes, let's run with that.\n   * @param {*} pathElement \n   * @returns \n   */\n  function getPathElementCoordinates(pathElement) {\n\n    //Get Pat coordinates from path element abd return them\n    let coordinates = pathElement.getAttribute(\"d\");\n    return coordinates;\n  }\n\n\n  /**\n     * This gets a group element's attributes and checks for children. It's basically like clear-blue.\n     * @param {*} groupElement \n     * @returns \n     */\n   function getGElementsAndAttributes (groupElement) {\n\n    //Build our base object first - grab the 2 key attributes any <g> element might have: \"transform\" & \"id\" if they don't have 'em, they are set to null.\n    let groupElementObject = {\n      'gTransformAtr' : groupElement.getAttribute(\"transform\") ? groupElement.getAttribute(\"transform\") : null,\n      'gIdAtr' : groupElement.getAttribute(\"id\") ? groupElement.getAttribute(\"id\") : null,\n      'hasChildren' : groupElement.children ? true : false,\n      'groupChildren' : [],\n      'pathChildren' : []\n    }\n\n    //Next check if there any children elements.\n    if (groupElementObject.hasChildren) {\n\n      //If there are, we grab them and put them in a variable. Congratulations, you have kids. lots of kids... You're going to need a bigger boat.\n      let gChildren = groupElement.children;\n\n      //Loop through each child.\n      for (let i = 0; i < gChildren.length; i++) { \n        if(gChildren[i].tagName === \"g\") {\n\n          //If child is another <g> element run this function again to add it to a nested array in our object as a new object parameter\n          groupElementObject.groupChildren.push(getGElementsAndAttributes(gChildren[i]));\n        } else if(gChildren[i].tagName === \"path\") {\n\n          //If current child is a <path> element add its \"d\" attribute cordinates to our a new path object object as a new parameter\n          let newPath = {\n            \"pathId\" : pathID,\n            \"pathCoordinates\" : getPathElementCoordinates(gChildren[i])\n          }  \n          //push this to an array on the parent tree g element        \n          groupElementObject.pathChildren.push(newPath);\n          //Add the fill to the fill color-array need to review this if black lines become an issue\n          updateInitialFillColorArray((pathID === 0)? basefill/*outlineFill*/ : basefill);\n          //increment the pathID\n          pathID++;\n        }\n      }      \n    }\n    return groupElementObject;\n   }\n\n\n   /**\n    * Calculate the dimensions of the SVG basd on the SVG tagged main element\n    * @param {*} svgElement \n    */\n   function getSvgDimensions(svgElement) {\n\n    //Get Width and height from their attributes\n    //added the regEx to remove any px or pt or anything that might be at the end of the string.\n    let svgWidth = svgElement.hasAttribute(\"width\") ? svgElement.getAttribute(\"width\").replace(/[^\\d.]/g, '') : null; \n    let svgHeight = svgElement.hasAttribute(\"height\") ? svgElement.getAttribute(\"height\").replace(/[^\\d.]/g, '') : null;\n\n    //If either of those failed try checking the viewBox attribute instead\n    if (svgWidth === null || svgHeight === null) {\n\n      //assuming the viewBox attribute is of the format \"x(0) y(0) W(unknown) H(unknown)\")\n      //may have to adapt if SVG is not 0,0 x,y registered\n      let viewBoxString = svgElement.hasAttribute(\"viewBox\") ? svgElement.getAttribute(\"viewBox\").substring(4) : null;\n\n      //if we have a viewbox proceed to set the values otherwise default to 100% for now (Will add more methods after unit testing SVGs from various sources)\n      svgWidth = viewBoxString !== null ? viewBoxString.substr(0,viewBoxString.indexOf(' ')) : \"100%\";\n      svgHeight = viewBoxString !== null ? viewBoxString.substr(viewBoxString.indexOf(' ')+1) : \"100%\";\n    }\n    return [svgWidth,svgHeight];\n   }\n\n\n  /**\n   * Main parsing function allowing for differently formatted SVGs using paths nested in an unknown number of group parents.\n   * @param {*} temporarySvgText \n   */\n  function parseTemporarySvg(temporarySvgText) {\n\n    //Reset the color array otherwise if we are loading in our second picture we will be addinf onto the existing array and inheriting those colors.\n    resetColors();\n\n    //Create new DOMParser and parse the passed in SVG data\n    let parser = new DOMParser();\n    let svgXml = parser.parseFromString(temporarySvgText, \"text/xml\");\n\n    //Get our main SVG element so we can work below it and ignore anythign extraneous\n    let svgElement = svgXml.getElementsByTagName(\"svg\")[0];\n    let svgDimensions = getSvgDimensions(svgElement);\n\n    //Get all the immediate children below this svg element\n    let svgChildGroupElements = svgElement.children;\n\n    //Loop through the elements\n    for (let i = 0; i < svgChildGroupElements.length; i++) {\n\n      //push an object containing the attributes we need to reconstruct an element of our SVG as a component (or series of nested components) to our placeholder array.\n       let groupElement = getGElementsAndAttributes(svgChildGroupElements[i]);\n       parsedElementsArray.push(groupElement);\n    }\n    return [parsedElementsArray, svgDimensions];\n  }\n\n  /**\n   * Just an extension checker. Will add second param to confirm what files we are checking for. Move this to helper js file\n   * @param {*} ext \n   * @returns \n   */\n  function checkFileExtension(ext) {\n    switch (ext) {\n      case \"svg\":\n        return true;\n      case \"jpg\":\n        return true;\n      case \"png\":\n        return true;\n      case \"gif\":\n        return true;\n      case \"tiff\":\n        return true;\n      case \"bmp\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * \n   * @param {*} file \n   */\n  function invertJPG(file) {\n\n    // Jimp.read(file)\n    //   .then(image => {\n    //     //console.log(image);\n    //     image.name = \"image-inverted.jpg\";\n    //     return image\n    //       //.resize(256, 256) // resize\n    //       //.quality(100) // set JPEG quality\n    //       .greyscale() // set greyscale\n    //       .invert()\n    //       //.write('image-inverted.jpg'); // save\n    //   })\n    //     .catch(err => {\n    //       console.error(err);\n    //   });\n  }\n  \n\n  /**\n   * \n   * @param {*} file \n   */\n  function convertRasterToSVG(file) {\n\n    const invertedFile = invertJPG(file);\n    setTestJPG(invertedFile);\n\n  }\n\n  /**\n   * give us the extension of a file. //move me. Not in the emotiona sense...\n   * @param {*} nameString \n   * @returns \n   */\n  function getFileExtension(nameString) {\n    const fileExtension = nameString.split('.').pop();\n    return fileExtension;\n  }\n\n\n  /**\n   * Monitor for a file selection and update the states. I like comments. Do you like comments?\n   * @param {*} e \n   */\n  function changeHandlerImage(e) {\n\n    //Set the file to a state and let us know it's been picked. We could probably live without this second part, but it's handy for some \"flooooooow\" control maaaan.\n    //ACTUALLY YES! I found a use. Hoisting the variable, to control if we show the pallette or not AND checking on click of the submit button. Not 100% sure on the spelling of pallette... Color picker then.\n    const fileExtension = getFileExtension(e.target.files[0].name);\n\n    //Let's check someone hasn't cheekily tried to upload soemthing that we do not support.\n    if(checkFileExtension(fileExtension)) {\n\n      //If file is an \"image\" then happy days! We can proceed with this whole sordid affair.\n      setSelectedFile(e.target.files[0]);\n      setSelectedFileExtension(fileExtension);\n      props.setIsFileSelected(true);\n      \n    } else {\n      console.log(\"TODO - .\" + fileExtension + \" fIles are not supported, update the input box css or something\");\n      setSelectedFileExtension(\"\");\n    }\n  }\n\n\n  /**\n   * On click of submit we need to parse the SVG or if a raster, first make that an appropriate SVG.\n   * Don't ask why, if you dodn't know, then you might be looking at the wrong code.\n   * @param {*} \n   */\n  function handleSubmission() {\n    if(props.isFileSelected) {\n      props.setSelectedNewFile(true);\n\n      //Instantiate a new FileReader to grab the data from the file once loaded.\n      const reader = new FileReader();   \n\n      if(selectedFileExtension === \"svg\") {\n        //Wait for it to load before parsing. Waaaait, waait for it. Hold! HOOOOOOOOLD!\n        reader.onload = () => {\n\n          //Parse! Parse! Parse! Get you're probably overcomplicated parsing done here, folks! I'm loosing it. Help.\n          let staticSvgData = parseTemporarySvg(reader.result);\n\n          //Set the state with our delicious specific and controllable oven fresh parsed data, and watch the magic happen! Or don't I'm not sure...\n          setSvgData((prevData) => {\n            return {\n              ...prevData,\n              key: uuidv4(),\n              width: staticSvgData[1][0],\n              height: staticSvgData[1][1],\n              data: staticSvgData[0]\n            };\n          });\n          props.setSelectedNewFile(false);\n          props.setIsFileConfirmed(true);\n        }\n        //Parse the selected file. Parse... Parse? Parsnips! Did you know they are surprisingly delicious just boiled, like you would a carrot. However, they are best when roasted with some honey. Mmmmmmmmmmmmmm, honey.\n        reader.readAsText(selectedFile);\n\n      } else if (selectedFileExtension === \"\") {\n        //If we click before uploading OR have chosen something that is not a supported image file do nothing.\n\n      } else {\n        //we must have an image (other than an SVG), so let's set about inverting and converting it.\n        reader.onloadend = function() {\n\n          //Here we goooooooooo\n          convertRasterToSVG(reader.result);\n        }\n        //we need this one as data not as text, as we need to mess with it before we can use it.\n        reader.readAsDataURL(selectedFile);\n      }\n      \n      props.setIsFileSelected(false);\n    } else {\n\n    }\n  }\n\n\n  /**\n   * This builds the path elements of our SVG component tree\n   * @param {*} svgElementData \n   * @returns \n   */\n  function buildSvgPaths(svgElementData) {\n    return (\n      <PathElem\n        key={uuidv4()}\n        pathId = {svgElementData.pathId} \n        pathCoordinates = {svgElementData.pathCoordinates}\n        setFill = {setFillColor}\n        fills = {fillColors}\n      />\n    )\n  }\n\n\n  /**\n   * If you're still reading comments, hello, thank you for checking out my code, would you like to be friends?\n   * Oh the fucntion? Ah yeah, it builds the g elements of our SVG component tree, well, it doesn't at the time of writing this,\n   * but I'm confident it will by the time I'm finished. Look out! Behind you! *woosh, gone*\n   * @param {*} svgElementData \n   * @returns \n   */\n  function buildSvgGroups(svgElementData) {\n    if(svgElementData.hasChildren) {\n      return (\n        <GroupElem\n          key={uuidv4()}\n          id={svgElementData.gIdAtr}\n          transform={svgElementData.gTransformAtr}\n        >\n          {(svgElementData.pathChildren.length === 0) && svgElementData.groupChildren.map(buildSvgGroups)}\n          {(svgElementData.pathChildren.length !== 0) && svgElementData.pathChildren.map(buildSvgPaths)}\n        </GroupElem>\n      );\n    }\n  }\n\n  /**\n   * Return our component, look! We made a lovely svg cyber-baby. Together. We did it together.\n   */\n  return (\n\n    <Fragment>\n      <label htmlFor=\"svgInput\" className=\"file-upload-input\">\n      {props.isFileConfirmed? \"Select a different File?\" : \"Upload your own JPG/PNG/BMP/SVG?\"}</label>\n\t\t\t<input id=\"svgInput\"  type=\"file\" accept=\".jpg,.gif,.png,.tiff,.svg,.bmp\" onChange={changeHandlerImage} />\n\n      \n      {props.isFileSelected ? (\n        <div>\n          <p>Filename: {selectedFile.name}</p>\n\t\t\t\t\t<p>Filetype: {selectedFile.type}</p>\n          <h3>is this the file you wish to upload?</h3>\n        </div>\n      ) : (\n        <br/>\n      )}\n\t\t\t<div>\n\t\t\t\t<button onClick={handleSubmission}>Submit</button>\n\t\t\t</div>\n      {!props.selectedNewFile ? (\n      <SvgElem width={svgData.width} height={svgData.height}>\n        {svgData.data.map(buildSvgGroups)}\n      </SvgElem>\n      ) : (\n        <p></p>\n      )}\n    </Fragment>\n  );\n}\n\n\n//Export(s).\nexport default SVGHolder;\n","export const defaultColorsArray = [\r\n[\"#FEEBEB\",\"#FFCED3\",\"#F09A9A\",\"#E57473\",\"#EF5450\",\"#F44336\",\"#E53935\",\"#D32F2F\",\"#C62828\",\"#B71C1C\"],\r\n    [\"#FDE4EC\",\"#F9BBD0\",\"#F590B2\",\"#F16292\",\"#EC407A\",\"#E91E63\",\"#D81B60\",\"#C2185B\",\"#AD1457\",\"#880E4F\"],\r\n    [\"#F4E6F6\",\"#E2BEE8\",\"#CE94D8\",\"#BA68C8\",\"#AB47BC\",\"#9C27B0\",\"#8E24AA\",\"#7B1FA2\",\"#6A1B9A\",\"#4A148C\"],\r\n    [\"#EEE8F7\",\"#D1C4EA\",\"#B39DDB\",\"#9576CD\",\"#7E57C2\",\"#673AB7\",\"#5E35B1\",\"#512DA8\",\"#4527A0\",\"#311B92\"],\r\n    [\"#E8EAF6\",\"#C5CAE9\",\"#9FA8DA\",\"#7986CB\",\"#5C6BC0\",\"#3F51B5\",\"#3949AB\",\"#303F9F\",\"#283593\",\"#1A237E\"],\r\n    [\"#E4F3FD\",\"#BBDEFC\",\"#91CBFA\",\"#64B6F6\",\"#42A5F5\",\"#2196F3\",\"#1E88E5\",\"#1976D2\",\"#1565C0\",\"#0D47A1\"],\r\n    [\"#E4F3FD\",\"#B3E5FD\",\"#80D4FA\",\"#50C4F8\",\"#29B6F6\",\"#03A9F4\",\"#039BE5\",\"#0288D1\",\"#0277BD\",\"#01579B\"],\r\n    [\"#E1F6FC\",\"#B2ECF3\",\"#80DEEA\",\"#4DD0E1\",\"#26C6DA\",\"#00BCD4\",\"#00ACC1\",\"#0097A7\",\"#00838F\",\"#006064\"],\r\n    [\"#E0F2F1\",\"#B2DFDB\",\"#80CCC5\",\"#4DB6AC\",\"#26A69A\",\"#009688\",\"#00897B\",\"#00796B\",\"#00695C\",\"#004D40\"],\r\n    [\"#E8F5E9\",\"#C8E6C9\",\"#A5D6A7\",\"#81C784\",\"#66BB6A\",\"#4CAF50\",\"#43A047\",\"#388E3C\",\"#2E7D32\",\"#1B5E20\"],\r\n    [\"#F2F9EA\",\"#DCEDC9\",\"#C5E1A5\",\"#AED681\",\"#9CCD65\",\"#8BC34A\",\"#7CB342\",\"#689F38\",\"#558B2F\",\"#33691E\"],\r\n    [\"#FDFCE8\",\"#F0F5C3\",\"#E6EF9D\",\"#DCE875\",\"#D4E157\",\"#CDDC39\",\"#C0CA33\",\"#AFB42B\",\"#9E9D24\",\"#827717\"],\r\n    [\"#FDFCE8\",\"#FFF9C4\",\"#FFF59D\",\"#FFF276\",\"#FFEF58\",\"#FFEC3B\",\"#FED835\",\"#FCC02D\",\"#F9A825\",\"#F57F17\"],\r\n    [\"#FDFCE8\",\"#FFEDB3\",\"#FFE182\",\"#FFD64F\",\"#FFCA28\",\"#FFC107\",\"#FFB300\",\"#FFA000\",\"#FF9000\",\"#FF6E00\"],\r\n    [\"#FFF6E1\",\"#FFE0B2\",\"#FFCF80\",\"#FFB74D\",\"#FFA726\",\"#FF9800\",\"#FB8C00\",\"#F57C00\",\"#EF6C00\",\"#E65100\"],\r\n    [\"#FEEBEB\",\"#FFCCBC\",\"#FFAB91\",\"#FF8A65\",\"#FF6F41\",\"#FF5722\",\"#F4511E\",\"#E64A19\",\"#D84315\",\"#BF360C\"],\r\n    [\"#E5DFDE\",\"#D7CCC9\",\"#BCAAA4\",\"#A1887E\",\"#8D6E63\",\"#795548\",\"#6D4C41\",\"#5D4037\",\"#4E342E\",\"#3E2723\"],\r\n    [\"#F5F5F5\",\"#EEEEEE\",\"#E0E0E0\",\"#BDBDBD\",\"#9E9E9E\",\"#757575\",\"#616161\",\"#424242\",\"#212121\",\"#161616\"],\r\n    [\"#EDF2F4\",\"#CFD8DC\",\"#B0BEC5\",\"#8FA4AE\",\"#77909C\",\"#607D8B\",\"#546E7A\",\"#455A64\",\"#37474E\",\"#273238\"],\r\n    [\"#FF8A80\",\"#FF5252\",\"#FF1744\",\"#D50000\",\"#FF80AB\",\"#FF4081\",\"#F50057\",\"#C51162\",\"#EA81FD\",\"#E040FC\"],\r\n    [\"#D500F9\",\"#AA01FF\",\"#B389FF\",\"#7C4CFF\",\"#651FFF\",\"#6200EA\",\"#8D9FFF\",\"#536DFF\",\"#3D5AFE\",\"#304FFE\"],\r\n    [\"#82B1FF\",\"#448AFF\",\"#2979FF\",\"#2962FF\",\"#80D8FF\",\"#40C4FF\",\"#00B0FF\",\"#0091EA\",\"#84FFFF\",\"#18FFFF\"],\r\n    [\"#00E5FF\",\"#00B8D4\",\"#A7FFEC\",\"#64FFDA\",\"#1DE9B6\",\"#00BFA5\",\"#B9F7CB\",\"#69F0AE\",\"#01E676\",\"#00C853\"],\r\n    [\"#CCFF90\",\"#B2FF59\",\"#76FF03\",\"#64DD17\",\"#F4FF81\",\"#EEFF41\",\"#C6FF01\",\"#AEEA00\",\"#FFFF8D\",\"#FFFF00\"],\r\n    [\"#FFEA00\",\"#FFD600\",\"#FFE57F\",\"#FFD740\",\"#FFC400\",\"#FFAB00\",\"#FFAB40\",\"#FF9E80\",\"#FF3D00\",\"#DD2C00\"]\r\n];","function ColorSwatch (props) {\r\n\r\n    return <button className=\"swatch\" /*onMouseLeave={props.mouseOut} onMouseOver={props.mouseOver}*/ onClick={props.click} style={{backgroundColor: props.color}} value={props.value}></button>;\r\n}\r\n\r\nexport default ColorSwatch;","import { v4 as uuidv4 } from \"uuid\";\r\nimport ColorSwatch from \"./ColorSwatch\";\r\n\r\nfunction ColorSwatchGroup (props) {\r\n\r\n    return (\r\n\r\n        <div className=\"color-swatch-group\">\r\n        {props.colors.map((color, index) => (\r\n            <ColorSwatch key={uuidv4()} /*mouseOver={props.mouseOverFunction} mouseOut={props.mouseOutFunction}*/ click={props.updateColor} color={color} value={color}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorSwatchGroup;","import { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { defaultColorsArray } from \"./Colors\";\nimport ColorSwatchGroup from \"./ColorSwatchGroup\";\nimport \"./ColorPicker.css\";\n\nfunction ColorPicker(props) {\n\n  const [previewColor, setPreviewColor] = useState(\"#ffffff\");\n  const [lastpreviewColor, setlastpreviewColor] = useState(\"#ffffff\");\n  function updatePreviewColor(e) {\n    setPreviewColor(e.target.value);\n  }\n\n  function updateColor(e) {\n    setPreviewColor(e.target.value);\n    setlastpreviewColor(previewColor);\n    props.updateColorHandler(e.target.value);\n  }\n\n  function revertPreviewColor() {\n    console.log(\"RollOFf: \" + lastpreviewColor)\n    setPreviewColor(lastpreviewColor);\n\n  }\n\n  return (\n\n    <div className=\"color-picker\">\n        <button style={{backgroundColor: previewColor, width: \"60px\", height: \"40px\"}}></button><br/><br/>\n\n        {defaultColorsArray.map((colorArray, index) => (\n          <ColorSwatchGroup key={uuidv4()} mouseOverFunction={updatePreviewColor} mouseOutFunction={revertPreviewColor} updateColor={updateColor} colors ={colorArray}/>\n          ))}\n    </div>\n\n    \n  \n  );\n}\nexport default ColorPicker;\n","import { useState } from 'react';\nimport SVGHolder from './SVGHolder';\nimport ColorPicker from './UI/ColorPicker';\nimport \"./App.css\";\n\nfunction App() {\n\n  const [colorPickerColor, setColorPickerColor] = useState(\"#ffffff\");\n  const [isFileSelected, setIsFileSelected] = useState(false);\n  const [isFileConfirmed, setIsFileConfirmed] = useState(false);\n  const [selectedNewFile, setSelectedNewFile] = useState(false);\n\n  \n\n  function updateColorHandler (newColor) {\n    setColorPickerColor(newColor);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SVGHolder colorPickerValue={colorPickerColor} selectedNewFile={selectedNewFile} setSelectedNewFile={setSelectedNewFile} isFileSelected={isFileSelected} setIsFileSelected={setIsFileSelected} setIsFileConfirmed={setIsFileConfirmed} isFileConfirmed={isFileConfirmed}/>\n        {isFileConfirmed && (\n        <ColorPicker updateColorHandler={updateColorHandler} colorPickerValue={colorPickerColor}/>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}